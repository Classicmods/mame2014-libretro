###########################################################################
#
#   Makefile.libretro
#
#   Makefile for building MAME and derivatives as libretro core libraries
#
#   Copyright (C) 2015 Libretro Team.
#   Licensing should be regarded as the same as that of the MAME project,
#   visit http://mamedev.org for more information.
#
###########################################################################

# Try to determine libretro $(platform) if it's either not provided to us,
# or if the user explicitly passes platform="" (i.e., for native buildtools
# in a cross-compile)
UNAME = $(shell uname -a)
ifeq ($(platform),)
	override platform = unix
	ifeq ($(UNAME),)
		override platform = win
	else ifneq ($(findstring MINGW,$(UNAME)),)
		override platform = win
	else ifneq ($(findstring Darwin,$(UNAME)),)
		override platform = osx
	else ifneq ($(findstring win,$(UNAME)),)
		override platform = win
	endif
endif


# libretro always wants dependencies compiled static when possible
BUILD_EXPAT = 1
BUILD_FLAC = 1
BUILD_JPEGLIB = 1
ifneq ($(platform), android)
	BUILD_ZLIB = 1
else
	BUILD_ZLIB = 0
endif

# This affects whether or not the retro OSD is built for OpenGL
VRENDER ?= soft

# If we define this, MAME's makefile will not define final linking rules
EXECUTABLE_DEFINED = 1

# Dunno if MAME ever used this, but the retro OSD does for now
# TARGET ?= mame
ifeq ($(TARGET), ume)
	CORE_DEFINE := -DWANT_UME
else ifeq ($(TARGET), mess)
	CORE_DEFINE := -DWANT_MESS
else
	CORE_DEFINE := -DWANT_MAME
endif

# Ensure $(EMULATOR) has no suffixes
override EMULATOR = $(TARGET)

# libretro's preferred settings
NOWERROR = 1
OSD = retro
OPTIMIZE = 3
DEFS += -DNDEBUG

# We don't do midi in libretro yet (and portmidi doesn't support eg, iOS)
NO_USE_MIDI = 2
override MIDI_LIB =

# Upstream makefile fails to add this to INCPATH, bug?
INCPATH += -I$(3RDPARTY)/libflac/src/libFLAC/include

ifeq ($(platform), unix)
	TARGETOS=linux
else ifeq ($(platform), android)
	TARGETOS=linux
	PTR64 = 0
	FORCE_DRC_C_BACKEND = 1
	CROSS_BUILD = 1
else ifeq ($(platform), osx)
	TARGETOS = macosx
	PYTHON ?= @python
else ifeq ($(platform), ios)
	# To build for iOS, do this:
	# make -f Makefile.libretro clean
	# make -f Makefile.libretro platform="" buildtools
	# make -f Makefile.libretro platform=ios
	TARGETOS = macosx
	PTR64 = 0
	CROSS_BUILD = 1
	PYTHON ?= @python
	FORCE_DRC_C_BACKEND = 1
else ifeq ($(platform), qnx)
	TARGETOS=linux
else ifneq (,$(findstring armv,$(platform)))
	TARGETOS=linux
else ifeq ($(platform), wincross)
	TARGETOS = win32
else
# it's win32
	TARGETOS = win32
endif

# Mame needs PTR64 defined on 64 bit processors, we guess at it if you aren't
# cross-compiling.  If you ARE, you need to set it yourself.
ifneq ($(CROSS_BUILD),1)

ifndef ($(PTR64)
	PTR64 = 0
ifeq ($(firstword $(filter x86_64,$(UNAME))),x86_64)
	PTR64 = 1
endif
ifeq ($(firstword $(filter amd64,$(UNAME))),amd64)
	PTR64 = 1
endif
ifeq ($(firstword $(filter ppc64,$(UNAME))),ppc64)
	PTR64 = 1
endif
ifeq ($(PROCESSOR_ARCHITECTURE),AMD64)
	PTR64 = 1
endif
ifeq ($(PROCESSOR_ARCHITEW6432),AMD64)
	PTR64 = 1
endif

endif # PTR64
endif # CROSS_BUILD

# Upstream uses @python, but they require 2.x for now.  They do that because
# some OSes (basically Apple) don't install 2.7 as python2.  @python2 is the
# "right" choice anywhere else, unless the user says otherwise. If that's not
# okay for a given $(platform), PYTHON ?= something in the block above.
PYTHON ?= @python2
override PYTHON := $(PYTHON)

retro-default: maketree retro-buildtools emulator

ifeq ($(CROSS_BUILD),1)
# Recursive make call without specifying platform so that host compilers are
# used for buildtools. Must use Makefile.libretro here because of REALCC.

HOST_CC ?= cc
HOST_CXX ?= c++

retro-buildtools:

	$(MAKE) -f Makefile.libretro platform="" CC=$(HOST_CXX) REALCC=$(HOST_CC) retro-buildtools
else
retro-buildtools: buildtools
endif

# ============================================================================
# Any settings/overrides that affect the logic of the upstream mame makefile
# must be set above here.

include makefile

# Anything below here is processed after mame's makefile logic is processed.
# Remember that $(VAR) is expanded at runtime, unless used in a simple-type
# := assignment.  Variables can be appended
# ============================================================================

CPPONLYFLAGS += -fpermissive
DEFS += $(CORE_DEFINE)

TARGETNAME = $(TARGET)2014

## Unix
ifeq ($(platform), unix)
	TARGETLIB := $(TARGETNAME)_libretro.so
	fpic := -fPIC
	SHARED := -shared -Wl,--version-script=src/osd/retro/link.T -Wl,--no-undefined
	CCOMFLAGS += $(fpic) -fsigned-char -finline  -fno-common -fno-builtin -fweb -frename-registers -falign-functions=16
	PLATCFLAGS +=  -DALIGN_INTS -DALIGN_SHORTS -fstrict-aliasing -fno-merge-constants  $(fpic)
	ifeq ($(VRENDER),opengl)
		PLATCFLAGS += -DHAVE_GL
		LIBS += -lGL
	endif
	LDFLAGS +=  $(fpic) $(SHARED)
	REALCC = cc
	BASELIBS +=  -lpthread
	REALCC := gcc
	CC := g++
	AR := @ar
	LD := g++
	CCOMFLAGS += $(PLATCFLAGS)
	LIBS += -lstdc++ -lpthread -ldl
	ifneq (,$(findstring ppc,$(UNAME)))
		BIGENDIAN=1
	else
		PLATCFLAGS += -DLSB_FIRST
	endif
#
## Android
else ifeq ($(platform), android)
	# May need to move armplatform := 1 to above "include makefile"
	armplatform := 1
	TARGETLIB := $(TARGETNAME)_libretro_android.so
	fpic := -fPIC
	SHARED := -shared -Wl,--version-script=src/osd/retro/link.T
	REALCC := @arm-linux-androideabi-gcc
	CC := @arm-linux-androideabi-g++
	AR := @arm-linux-androideabi-ar
	LD := @arm-linux-androideabi-g++
	CCOMFLAGS += $(fpic) -mstructure-size-boundary=32 -mthumb-interwork -falign-functions=16 -fsigned-char -finline  -fno-common -fno-builtin -fweb -frename-registers -falign-functions=16 -Wno-psabi
	CCOMFLAGS_INCOMPATIBLE :=
	PLATCFLAGS += -march=armv7-a -mfloat-abi=softfp -DANDROID -DALIGN_INTS -DALIGN_SHORTS -DLSB_FIRST -fstrict-aliasing -fno-merge-constants -DSDLMAME_NO64BITIO -DSDLMAME_ARM -DRETRO_SETJMP_HACK $(fpic)
	ifeq ($(VRENDER),opengl)
		PLATCFLAGS += -DHAVE_GL
		LIBS += -lGLESv2
		GLES = 1
	endif
	LDFLAGS += -Wl,--fix-cortex-a8 -Wl,--no-undefined -llog $(fpic) $(SHARED)
	CCOMFLAGS += $(PLATCFLAGS)
	LIBS += -lstdc++
## OS X
else ifeq ($(platform), osx)
	TARGETLIB := $(TARGETNAME)_libretro.dylib
	fpic := -fPIC -mmacosx-version-min=10.7
	LIBCXX := libstdc++
	LDFLAGSEMULATOR +=  -stdlib=$(LIBCXX)
	PLATCFLAGS += $(fpic)
	SHARED := -dynamiclib
	# Uses gcc or clang, whichever is default
	CXX_AS := c++
	REALCC := cc
	CC := $(CXX_AS) -stdlib=$(LIBCXX)
	LD := $(CXX_AS) -stdlib=$(LIBCXX)
	LDFLAGS +=  $(fpic) $(SHARED)
	AR := @ar
	ifeq ($(COMMAND_MODE),"legacy")
		ARFLAGS = -crs
	endif
	ifneq (,$(findstring Power,$(UNAME)))
		BIGENDIAN=1
	else
		PLATCFLAGS += -DLSB_FIRST
	endif
	PLATCFLAGS += -DSDLMAME_NO64BITIO -DOSX
	CCOMFLAGS += $(PLATCFLAGS)

# iOS
else ifneq (,$(findstring ios,$(platform)))

	armplatform := 1
	TARGETLIB := $(TARGETNAME)_libretro_ios.dylib
	fpic := -fPIC
	SHARED := -dynamiclib
	LIBCXX := libstdc++

	IOSSDK := $(shell xcodebuild -version -sdk iphoneos Path)
	CXX_AS := c++
	REALCC = cc -arch armv7 -isysroot $(IOSSDK)
	CC = $(CXX_AS) -arch armv7 -isysroot $(IOSSDK)
	LD = $(CC) -stdlib=$(LIBCXX)
	LDFLAGS +=  $(fpic) $(SHARED)
	LDFLAGSEMULATOR += -stdlib=$(LIBCXX)
	PLATCFLAGS += -mfloat-abi=softfp -marm -DSDLMAME_NO64BITIO -DIOS -DSDLMAME_ARM -DHAVE_POSIX_MEMALIGN
	CCOMFLAGS += $(PLATCFLAGS)
## QNX
else ifeq ($(platform), qnx)
	armplatform := 1
	TARGETLIB := $(TARGETNAME)_libretro_qnx.so
	fpic := -fPIC
	SHARED := -shared -Wl,--version-script=src/osd/retro/link.T

	CC := qcc -Vgcc_ntoarmv7le
	REALCC := qcc -Vgcc_ntoarmv7le
	AR := qcc -Vgcc_ntoarmv7le
	CFLAGS += -D__BLACKBERRY_QNX__
	LIBS += -lstdc++ -lpthread

## PS3
# mame isn't likely to run very well on PS3, but if you want to make it work,
# these blocks are a start (don't forget to set REALCC as well)
#else ifeq ($(platform), ps3)
#	TARGETLIB := $(TARGETNAME)_libretro_ps3.a
#	CC = $(CELL_SDK)/host-win32/ppu/bin/ppu-lv2-gcc.exe
#	AR = $(CELL_SDK)/host-win32/ppu/bin/ppu-lv2-ar.exe
#	CFLAGS += -DBLARGG_BIG_ENDIAN=1 -D__ppc__
#	STATIC_LINKING = 1
#	BIGENDIAN=1
#	LIBS += -lstdc++ -lpthread
#
## sncps3
#else ifeq ($(platform), sncps3)
#	TARGETLIB := $(TARGETNAME)_libretro_ps3.a
#	CC = $(CELL_SDK)/host-win32/sn/bin/ps3ppusnc.exe
#	AR = $(CELL_SDK)/host-win32/sn/bin/ps3snarl.exe
#	CFLAGS += -DBLARGG_BIG_ENDIAN=1 -D__ppc__
#	STATIC_LINKING = 1
#	BIGENDIAN=1
#	LIBS += -lstdc++ -lpthread
#
## Lightweight PS3 Homebrew SDK
#else ifeq ($(platform), psl1ght)
#	TARGETLIB := $(TARGETNAME)_libretro_psl1ght.a
#	CC = $(PS3DEV)/ppu/bin/ppu-gcc$(EXE_EXT)
#	AR = $(PS3DEV)/ppu/bin/ppu-ar$(EXE_EXT)
#	CFLAGS += -DBLARGG_BIG_ENDIAN=1 -D__ppc__
#	STATIC_LINKING = 1
#	BIGENDIAN=1
#	LIBS += -lstdc++ -lpthread
#
## PSP
#else ifeq ($(platform), psp1)
#	TARGETLIB := $(TARGETNAME)_libretro_psp1.a
#	CC = psp-g++$(EXE_EXT)
#	AR = psp-ar$(EXE_EXT)
#	CFLAGS += -DPSP -G0
#	STATIC_LINKING = 1
#	LIBS += -lstdc++ -lpthread
#
## Xbox 360
#else ifeq ($(platform), xenon)
#	TARGETLIB := $(TARGETNAME)_libretro_xenon360.a
#	CC = xenon-g++$(EXE_EXT)
#	AR = xenon-ar$(EXE_EXT)
#	CFLAGS += -D__LIBXENON__ -m32 -D__ppc__
#	STATIC_LINKING = 1
#	BIGENDIAN=1
#	LIBS += -lstdc++ -lpthread
#
## Nintendo Game Cube
#else ifeq ($(platform), ngc)
#	TARGETLIB := $(TARGETNAME)_libretro_ngc.a
#	CC = $(DEVKITPPC)/bin/powerpc-eabi-g++$(EXE_EXT)
#	AR = $(DEVKITPPC)/bin/powerpc-eabi-ar$(EXE_EXT)
#	CFLAGS += -DGEKKO -DHW_DOL -mrvl -mcpu=750 -meabi -mhard-float -DBLARGG_BIG_ENDIAN=1 -D__ppc__
#	STATIC_LINKING = 1
#	BIGENDIAN=1
#	LIBS += -lstdc++ -lpthread
#
## Nintendo Wii
#else ifeq ($(platform), wii)
#	TARGETLIB := $(TARGETNAME)_libretro_wii.a
#	CC = $(DEVKITPPC)/bin/powerpc-eabi-g++$(EXE_EXT)
#	AR = $(DEVKITPPC)/bin/powerpc-eabi-ar$(EXE_EXT)
#	CFLAGS += -DGEKKO -DHW_RVL -mrvl -mcpu=750 -meabi -mhard-float -DBLARGG_BIG_ENDIAN=1 -D__ppc__
#	STATIC_LINKING = 1
#	BIGENDIAN=1
#	LIBS += -lstdc++ -lpthread
#
## ARM
#else ifneq (,$(findstring armv,$(platform)))
#	armplatform := 1
#	TARGETLIB := $(TARGETNAME)_libretro.so
#	fpic := -fPIC
#	SHARED := -shared -Wl,--version-script=src/osd/retro/link.T -Wl,--no-undefined
#	CCOMFLAGS += $(fpic) -mstructure-size-boundary=32 -falign-functions=16 -fsigned-char -finline -fno-common -fno-builtin -fweb -frename-registers -falign-functions=16
#	PLATCFLAGS += -march=armv7-a -DALIGN_INTS -DALIGN_SHORTS -DLSB_FIRST -fstrict-aliasing -fno-merge-constants -DSDLMAME_NO64BITIO -DSDLMAME_ARM -DRETRO_SETJMP_HACK
#	LDFLAGS += -Wl,--fix-cortex-a8 -Wl,--no-as-needed $(fpic) $(SHARED)
#	CC = g++
#	AR = @ar
#	LD = g++
#	CCOMFLAGS += $(PLATCFLAGS)
#
#	ifneq (,$(findstring cortexa8,$(platform)))
#		PLATCFLAGS += -marm -mcpu=cortex-a8
#	else ifneq (,$(findstring cortexa9,$(platform)))
#		PLATCFLAGS += -marm -mcpu=cortex-a9
#	endif
#	PLATCFLAGS += -marm
#	ifneq (,$(findstring neon,$(platform)))
#		PLATCFLAGS += -mfpu=neon
#		HAVE_NEON = 1
#	endif
#	ifneq (,$(findstring softfloat,$(platform)))
#		PLATCFLAGS += -mfloat-abi=softfp
#	else ifneq (,$(findstring hardfloat,$(platform)))
#		PLATCFLAGS += -mfloat-abi=hard
#	endif
#	ifeq ($(VRENDER),opengl)
#		PLATCFLAGS += -DHAVE_GL
#		LIBS += -lGLESv2
#		GLES = 1
#	endif
#
#	PLATCFLAGS += -DARM
#	LIBS += -lstdc++ -lpthread -ldl
#
## Windows cross compiler
else ifeq ($(platform), wincross)
	TARGETLIB := $(TARGETNAME)_libretro.dll
	# You're going to have to pass REALCC=<whatever> on the cmdline for wincross
	REALCC := gcc
	CC := g++
	LD := $(CC)
	SHARED := -shared -static-libgcc -static-libstdc++ -s -Wl,--version-script=src/osd/retro/link.T
	CCOMFLAGS += -D__WIN32__
	LDFLAGS += $(SHARED)
	ifeq ($(VRENDER),opengl)
		CCOMFLAGS += -DHAVE_GL
		LIBS += -lopengl32
	endif
	EXE = .exe
	ifneq (,$(findstring mingw64-w64,$(PATH)))
		PTR64=1
	endif

else
	## Windows
	TARGETLIB := $(TARGETNAME)_libretro.dll
	REALCC = gcc
	CC = g++
	LD = $(CC)
	SHARED := -shared -static-libgcc -static-libstdc++ -s -Wl,--version-script=src/osd/retro/link.T
	CCOMFLAGS += -D__WIN32__
	LDFLAGS += $(SHARED)
	ifeq ($(VRENDER),opengl)
		CCOMFLAGS += -DHAVE_GL
		LIBS += -lopengl32
	endif
	EXE = .exe
	LIBS += -lws2_32
	# FIXME: Check if TARGETOS does this in makefile for you
	#        Also I'm not sure the PTR64 stuff is being done right
	DEFS += -DX64_WINDOWS_ABI
	ifneq ($(findstring MINGW,$(shell uname -a)),)
		PTR64=1
	endif
endif

ifeq ($(platform), osx)
CONLYFLAGS += -ansi
else
CONLYFLAGS += -std=gnu89
endif

libretro-target: clean-osd $(EMULATOR)

# This replaces the $(EMULATOR) rule in makefile, so if that changes you may
# need to modify this recipe accordingly.
$(EMULATOR): $(EMUINFOOBJ) $(DRIVLISTOBJ) $(DRVLIBS) $(OSDOBJS) $(LIBBUS) $(LIBOPTIONAL) $(LIBEMU) $(LIBDASM) $(LIBUTIL) $(EXPAT) $(SOFTFLOAT) $(JPEG_LIB) $(FLAC_LIB) $(7Z_LIB) $(FORMATS_LIB) $(LUA_LIB) $(SQLITE3_LIB) $(WEB_LIB) $(ZLIB) $(LIBOCORE) $(MIDI_LIB) $(RESFILE)
	$(CC) $(CDEFS) $(CFLAGS) -c $(SRC)/version.c -o $(VERSIONOBJ)
	@echo Linking $(TARGETLIB)
	$(LD) $(LDFLAGS) $(LDFLAGSEMULATOR) $(VERSIONOBJ) $^ $(LIBS) -o $(TARGETLIB)

# Upstream cleans $(OBJ) which may not get everything
clean: clean-libretro
clean-libretro:
	@echo Deleting object tree obj...
	$(RM) -r obj/*
	@echo Deleting old build products...
	$(RM) *.dll *.so *.dylib

# retro OSD varies between mame, mess, ume so clean it between each
clean-osd:
	@echo Deleting object tree obj/osd...
	$(RM) -r obj/osd/*

.PHONY: clean-osd
